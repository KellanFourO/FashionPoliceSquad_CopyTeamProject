#ifndef Engine_Enum_h__
#define Engine_Enum_h__

namespace Engine
{
	enum WINMODE { MODE_FULL, MODE_WIN };

	// Dynamic 컴포넌트 경우 매 프레임마다 갱신해야하는 컴포넌트 집단
	enum COMPONENTID { ID_DYNAMIC, ID_STATIC, ID_END };
	enum INFO {	INFO_RIGHT, INFO_UP, INFO_LOOK, INFO_POS, INFO_END };
	enum ROTATION { ROT_X, ROT_Y, ROT_Z, ROT_AXIS, ROT_END };

	enum TEXTUREID { TEX_NORMAL, TEX_CUBE, TEX_END };


	enum RENDERID { RENDER_PRIORITY, RENDER_NONALPHA,RENDER_ALPHATEST, RENDER_ALPHA, RENDER_UI,RENDER_BLOCK, RENDER_END };
	enum CAMERAID { CAM_FIRST, CAM_THIRD, CAM_CENTER, CAM_END };

	enum OBJ_STATE {OBJ_NOEVENT, OBJ_DEAD, OBJ_END};

	enum MOUSEKEYSTATE { DIM_LB, DIM_RB, DIM_MB, DIM_END };
	enum MOUSEMOVESTATE { DIMS_X, DIMS_Y, DIMS_Z, DIMS_END };

	enum class StateMachine { IDLE, WALK, ATTACK, HIT, DEAD, JUMP, ROLL, GET, FALL, PUSH, SHIELD, STATE_END };

	enum class LAYERTAG {EVERYTHING, ENVIRONMENT, GAMELOGIC, CAMERA, EFFECT, UI, LAYERTAG_END};

	enum class SCENETAG {LOGO,LOADING ,STAGE, MAPTOOL, BOSS_STAGE, SCENETAG_END };

	enum class COMPONENTTAG
	{
		BUFFER, TRANSFORM, TRANSFORM_2, TRANSFORM_3, TRANSFORM_4,
		TEXTURE, CALCULATOR, LIGHT, CAMERA, BASICSTAT, MONSTERAI,
		ANIMATOR, PARTICLE, BILLBOARD, STATEMACHINE, INVENTORY, FONT, RIGIDBODY, COLLIDER, COMPONENT_END
	};
	enum class OBJECTTAG
	{
		NOTHING ,PLAYER, PROGRESSVALUE, PROGRESSFRAME, FPSCAMERA, DCAMERA, FLYCAMERA, PLAYERBULLET,  MONSTER, BOSS, ITEM, MONSTERBULLET, UI,
		MISSION, PORTRAIT, CROSSHAIR, CARDLIST, CARD, CARDTEXTURE, DIALOG, BOSSBULLET, OBJECT, RAY, SKYBOX,  EFFECT, BACKGOUND, TERRAIN, WIREFRAME,
		DYEHARD, PLAYER_GUN, PLAYER_HAND, BUILD_CUBE, BUILD_OBJ, MAPCURSOR, DEAD_OBJ, DEAD_MONSTER, PARTICLE, OBJECT_END
	};

	enum CHANNELID { SOUND_EFFECT, SOUND_BGM, Bunshin, MAXCHANNEL };


	//유진) 설치물OBJ 구분용
	enum class	OBJ_TYPE { BUILDING, CUBE_OBJ, CROSS_OBJ, PLANE_OBJ, OBJ_TYPE_END };
	enum class CAMERA_TYPE { NOTMOVE_CAMERA, MOVE_CAMERA, CAMERA_END };
	enum class LIGHT_TYPE { LIGHT_DIRECTIONAL, LIGHT_POINT, LIGHT_SPOT, LIGHT_END };


	//TODO - 승용 UI 타입별 태그 정리 시작
	enum class UI_TYPE { HP, VALUE, SPRITE, BULLET, FONT, DIALOG, BASIC, UI_TYPE_END};
	enum class CARD_TYPE { FORCE, SPEED, INTELLIGENCE, STRENGTH, BONUS, BOMB, CARD_TYPE_END};
	enum class CARD_DIR { CARD_LEFT, CARD_CENTER, CARD_RIGHT, CARD_END };
	enum class DIALOGTAG { STORY_ST1_INTRO, STORY_ST1_DEVELOP, STORY_ST1_TURN, STORY_ST1_CONCLU, QUEST_1, QUEST_2};
	enum class PORTRAITTAG {PORT_DES, PORT_DESNEON, PORT_HALEY, PORT_DEEPCOAT, PORT_BAUSS, PORT_TURNCOAT};
	enum class BULLETTYPE { SHOTGUN_BULLET, SHOTGUN_RAZER, ASSERTRIFLE_BULLET, ASSERTRIFLE_BOMB,  BULLETTYPE_END};
	enum class PLAYER_GUNTYPE { SHOTGUN, ASSERTRIFLE, PLAYER_GUNTYPE_END};

	//TODO - 승용 UI 타입별 태그 정리 끝


	//enum class TIMERTAG {,TIMERTAG_END};

	//enum PROTOTAG {PROTO_TERRAINTEX,PROTO_TRANSFORM,PROTO_TERRAINTEXTURE,PROTO_RCTEX,PROTO_LOGOTEXTURE,PROTO_BRIFCASE,PROTO_DYEHARD,PROTO_EFFECTTEXTURE,PROTO_CALCULATOR,PROTO_TEXTURETILE,};
	//필요한 enum class들 자기 이름 밑에다가 직접 만들것 ! 그리고 이름이 겹칠경우 문제가 생기니 이니셜 꼭 붙여서 만들것
	//EX) enum MOUSEMOVESTATE { JYP_DIMS_X, JYP_DIMS_Y, JYP_DIMS_Z, JYP_DIMS_END };



	//준호 SM
	//충돌


	//유진 YG

	//승용 SKY




	enum class PlayerStateID	//	플레이어 표정 바꿔줄때 받으면 되는 상태
								//	Player_Info& PlayerINFO = dynamic_cast<CPlayer*>(pPlayer)->Get_INFO();
								//	PlayerStateID stateID = PlayerINFO.PlayerState->StateID;
	{ Player_IDLE, Player_Right, Player_Left, Player_Hit, Player_Heal, Player_Armor, Player_Lv_Up};
	enum class MonsterState {
		IDLE, AGGRO_ON, HIT, DEAD, MOBSTATE_END
	};
	enum class MonsterType {
		BRIFBIG, BRIFSMALL, KCIKBOARD, SMOKER, BOSS, MOBTYPE_END
	};
	enum class MonsterHit
	{};
	enum class GunID        // 총 ID (dynamic_cast<CGun*>(pGun)->GUN_ID == GunID::DYEHARD) 같은 방법으로 찾으면 됨
	{ DYEHARD, RIFLE, GUN_ID_END };
	enum class ItemID		// 아이템 ID
	{	COCKTAIL, BIG_COCKTAIL, WATCH, NECKTIE, CAN, CLOSET,
		SUNGLASSES, HIP_SUNGLASSES,
		SISORS_RED, SISORS_GREEN, SISORS_BLUE, ITEM_ID_END
	};

	//재연 JYP

	enum class BOSSPHASE { PHASE_1, PHASE_2, PHASE_3, PHASE_END};


};
#endif // Engine_Enum_h__
